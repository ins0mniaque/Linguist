<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AnyInputDemo" xml:space="preserve">
    <value>Can use any formattable object as input for number :</value>
  </data>
  <data name="BinaryDataDemo" xml:space="preserve">
    <value>Can read binary data on .NET Core 2.0 (Using BinaryResourceSet) :</value>
  </data>
  <data name="BinaryImageDemo" xml:space="preserve">
    <value>Can read System.Drawing image objects as System.Drawing.Common objects on .NET Core 2.0 (Using BinaryResourceSet) :</value>
  </data>
  <data name="Conclusion" xml:space="preserve">
    <value>There is a lot more to Linguist!

See https://github.com/ins0mniaque/Linguist for information on NuGet packages and updates,
and check out the Linguist extension on the Marketplace!

https://marketplace.visualstudio.com/items?itemName=ins0mniaque.linguist</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="File" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Assets\File.dat;System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="FilesFound" xml:space="preserve">
    <value>{0} files found</value>
  </data>
  <data name="FilesFound.One" xml:space="preserve">
    <value>{0} file found</value>
  </data>
  <data name="FilesFound.Zero" xml:space="preserve">
    <value>No files found</value>
  </data>
  <data name="FilesNotFound" xml:space="preserve">
    <value>{0} files not found</value>
  </data>
  <data name="Icon" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Assets\Icon.ico;System.Drawing.Icon, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Image" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Assets\Image.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Introduction" xml:space="preserve">
    <value>Linguist adds support for pluralization rules defined by the Unicode CLDR Project (http://cldr.unicode.org) by adding additional plural forms entries to resource files.

The default naming strategy reads a .PluralForm suffix at the end of resources, where PluralForm can be one of these :

    - Zero
    - One
    - Two
    - Few
    - Many
    - Other
    - 0 (For explicit zero)
    - 1 (For explicit one)
    - Range (Special form to specify the start of a range)

See https://unicode.org/reports/tr35/tr35-numbers.html#Language_Plural_Rules for more information on plural forms and Resources.resx for examples.</value>
  </data>
  <data name="Meters" xml:space="preserve">
    <value>{0} meters</value>
  </data>
  <data name="Meters.One" xml:space="preserve">
    <value>{0} meter</value>
  </data>
  <data name="MetersRange" xml:space="preserve">
    <value>{0}–{1} meters</value>
  </data>
  <data name="MetersRange.Range.One" xml:space="preserve">
    <value>{0}–{1} meter</value>
  </data>
  <data name="MultiplePluralsDemo" xml:space="preserve">
    <value>Support for multiple plurals :

NOTE: Not recommended with current naming strategy; translators needs to add (Number of arguments)^(Number of plurals - 1) entries, and some locales have up to 6 plurals (see Resources.resx).</value>
  </data>
  <data name="NonNumberDemo" xml:space="preserve">
    <value>Formats using the default plural rule with non-numbers input :</value>
  </data>
  <data name="PluralizationDemo" xml:space="preserve">
    <value>Automatic pluralization with support for integer and decimal rules :</value>
  </data>
  <data name="PluralRangeDemo" xml:space="preserve">
    <value>Supports plural range rules :</value>
  </data>
  <data name="SearchResult" xml:space="preserve">
    <value>{0} files found; {1} files not found</value>
  </data>
  <data name="SearchResult.One.One" xml:space="preserve">
    <value>{0} file found; {1} file not found</value>
  </data>
  <data name="SearchResult.One.Other" xml:space="preserve">
    <value>{0} file found; {1} files not found</value>
  </data>
  <data name="SearchResult.One.Zero" xml:space="preserve">
    <value>{0} files found</value>
  </data>
  <data name="SearchResult.Other.One" xml:space="preserve">
    <value>{0} files found; {1} file not found</value>
  </data>
  <data name="SearchResult.Other.Zero" xml:space="preserve">
    <value>{0} files found</value>
  </data>
  <data name="SearchResult.Zero.One" xml:space="preserve">
    <value>{1} file not found</value>
  </data>
  <data name="SearchResult.Zero.Other" xml:space="preserve">
    <value>{1} files not found</value>
  </data>
  <data name="SearchResult.Zero.Zero" xml:space="preserve">
    <value>Nothing to find</value>
  </data>
  <data name="Welcome" xml:space="preserve">
    <value>Welcome to Linguist!</value>
  </data>
</root>