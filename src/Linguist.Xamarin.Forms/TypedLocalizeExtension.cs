using System;
using System.Collections.Generic;
using System.Globalization;

using Xamarin.Forms;

namespace Linguist.Xamarin.Forms
{
    // NOTE: Generic constraint is commented out because it cannot be generated by CodeDom.
    public abstract class TypedLocalizeExtension < TKey > : ResourceMarkupExtension // where TKey : struct, IConvertible
    {
        static TypedLocalizeExtension ( )
        {
            if ( ! typeof ( TKey ).IsEnum )
                throw new ArgumentException ( "TKey must be an enumerated type" );
        }

        public abstract TKey        Key     { get; set; }
        public abstract BindingBase KeyPath { get; set; }
        public abstract Type        Type    { get; set; }

        protected abstract ILocalizationProvider Provider  { get; }
        protected abstract string                KeyToName ( TKey key );

        protected override void SetupBinding ( Binding binding, IServiceProvider serviceProvider )
        {
            var bindings = new List < BindingBase > ( );

            binding.Converter          = this;
            binding.ConverterParameter = Key;

            if ( KeyPath != null )
            {
                bindings.Add ( KeyPath );
                binding.ConverterParameter = null;
            }

            if ( arguments != null )
                foreach ( var argument in arguments )
                    bindings.Add ( argument );

            serviceProvider.EmulateMultiBinding ( binding, bindings );
        }

        protected override object ProvideResource ( object [ ] values, Type targetType, object parameter, CultureInfo culture )
        {
            if ( parameter == null )
            {
                var keyPath = values [ 0 ];
                if ( keyPath is TKey typedKey )
                    values [ 0 ] = KeyToName ( typedKey );
                else if ( keyPath != null && TryParseKey ( keyPath, out var key ) )
                    values [ 0 ] = KeyToName ( key );
            }
            else if ( parameter is TKey key )
                parameter = KeyToName ( key );

            return Localize.ProvideResource ( Provider, culture, parameter?.ToString ( ), values, Type ?? targetType );
        }

        private static bool TryParseKey ( object keyPath, out TKey key )
        {
            // NOTE: Because generic constraint is commented out, Enum.TryParse cannot be used.
            // return Enum.TryParse < TKey > ( keyPath.ToString ( ), out key );

            try
            {
                key = (TKey) Enum.Parse ( typeof ( TKey ), keyPath.ToString ( ) );
                return true;
            }
            catch
            {
                key = default;
                return false;
            }
        }
    }
}